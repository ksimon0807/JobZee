import { catchAsyncError } from "../middlewares/catchAsyncError.js";
import ErrorHandler from "../middlewares/error.js";
import { User } from "../models/userSchema.js";
import { sendToken } from "../utils/jwtToken.js";
import { v2 as cloudinary } from 'cloudinary';

export const register = catchAsyncError(async (req, res, next) => {
  const { name, email, phone, role, password } = req.body;
  if (!name || !email || !phone || !role || !password) {
    return next(new ErrorHandler("Please fill full registration details !"));
  }
  const isEmail = await User.findOne({ email });
  if (isEmail) {
    return next(new ErrorHandler("Email already exists!"));
  }
  const user = await User.create({
    name,
    email,
    phone,
    role,
    password,
  });
  sendToken(user, 200, res, "User Registered successfully");
});

// export const login = catchAsyncError(async (req, res, next) => {
//   const { email, password, role } = req.body;

//   // 🛑 Check if email, password, and role are provided
//   if (!email || !password || !role) {
//     return next(
//       new ErrorHandler("Please enter email, password, and role!", 400)
//     );
//   }

//   // 🔍 Find the user with matching email and role
//   const user = await User.findOne({ email }).select("+password");

//   // ❌ Check if the user exists
//   if (!user) {
//     return next(new ErrorHandler("Invalid email, password, or role!", 400));
//   }

//   // 🔐 Compare provided password with hashed password
//   const isPasswordMatched = await user.comparePassword(password);

//   if (!isPasswordMatched) {
//     return next(new ErrorHandler("Invalid email or password!", 400));
//   }

//   if (user.role !== role) {
//     return next(new ErrorHandler("User with this role not found", 400));
//   }

//   // ✅ Send token if everything is correct
//   sendToken(user, 200, res, "User logged in successfully");
// });

export const login = catchAsyncError(async (req, res, next) => {
  const { email, password, role } = req.body;
  if (!email || !password || !role) {
    return next(new ErrorHandler("Please provide email ,password and role."));
  }
  const user = await User.findOne({ email }).select("+password");
  if (!user) {
    return next(new ErrorHandler("Invalid Email Or Password.", 400));
  }
  const isPasswordMatched = await user.comparePassword(password);
  if (!isPasswordMatched) {
    return next(new ErrorHandler("Invalid Email Or Password.", 400));
  }
  if (user.role !== role) {
    return next(
      new ErrorHandler(`User with provided email and ${role} not found!`, 404)
    );
  }
  sendToken(user, 201, res, "User Logged In!");
});

export const logout = catchAsyncError(async (req, res, next) => {
  res
    .status(201)
    .cookie("token", null, {
      expires: new Date(Date.now()),
      httpOnly: true,
    })
    .json({
      success: true,
      message: "User logged out successfully!",
    });
});

export const getUser = catchAsyncError(async (req, res, next) => {
  const user = req.user;
  res.status(200).json({
    success: true,
    user,
  });
});

// Google OAuth Register
export const googleRegister = catchAsyncError(async (req, res, next) => {
  const { name, email, role, googleId } = req.body;

  if (!name || !email || !role || !googleId) {
    return next(
      new ErrorHandler(
        "Please provide all required details for Google registration!"
      )
    );
  }

  const isEmail = await User.findOne({ email });
  if (isEmail) {
    return next(new ErrorHandler("Email already exists!"));
  }

  const user = await User.create({
    name,
    email,
    phone: 0, // Default phone number
    role,
    password: "google_oauth_user",
    googleId,
  });

  sendToken(user, 200, res, "User registered successfully with Google");
});

// Google OAuth Login
export const googleLogin = catchAsyncError(async (req, res, next) => {
  const { email, googleId, role } = req.body;
  
  if (!email || !googleId) {
    return next(new ErrorHandler("Please provide email and Google ID!"));
  }
  
  const user = await User.findOne({ email, googleId });
  if (!user) {
    return next(new ErrorHandler("User not found. Please register first.", 404));
  }
  
  // Update role if provided and different
  if (role && user.role !== role) {
    user.role = role;
    await user.save();
  }
  
  sendToken(user, 201, res, "User logged in successfully with Google!");
});

// Update user profile
export const updateProfile = catchAsyncError(async (req, res, next) => {
  const { name, email, phone, skills, education, experience, bio, location, social } = req.body;
  const userId = req.user.id;

  const updateFields = {
    ...(name && { name }),
    ...(email && { email }),
    ...(phone && { phone }),
    ...(skills && { skills: skills.split(',').map(skill => skill.trim()) }),
    ...(education && { education: JSON.parse(education) }),
    ...(experience && { experience: JSON.parse(experience) }),
    ...(bio && { bio }),
    ...(location && { location }),
    ...(social && { social: JSON.parse(social) })
  };

  const user = await User.findByIdAndUpdate(
    userId,
    { $set: updateFields },
    { new: true, runValidators: true }
  );

  if (!user) {
    return next(new ErrorHandler("User not found", 404));
  }

  res.status(200).json({
    success: true,
    message: "Profile updated successfully",
    user
  });
});

// Handle avatar upload
export const handleAvatarUpload = catchAsyncError(async (req, res, next) => {
  if (!req.file) {
    return next(new ErrorHandler("Please upload an avatar", 400));
  }

  const user = await User.findByIdAndUpdate(
    req.user.id,
    {
      avatar: {
        public_id: req.file.filename,
        url: req.file.path
      }
    },
    { new: true }
  ).exec();

  if (!user) {
    return next(new ErrorHandler("User not found", 404));
  }

  res.status(200).json({
    success: true,
    message: "Avatar uploaded successfully",
    avatar: user.avatar
  });
});

// Handle resume upload
export const handleResumeUpload = catchAsyncError(async (req, res, next) => {
  if (!req.file) {
    return next(new ErrorHandler("Please upload a resume", 400));
  }

  const user = await User.findByIdAndUpdate(
    req.user.id,
    {
      resume: {
        public_id: req.file.filename,
        url: req.file.path
      }
    },
    { new: true }
  ).exec();

  if (!user) {
    return next(new ErrorHandler("User not found", 404));
  }

  res.status(200).json({
    success: true,
    message: "Resume uploaded successfully",
    resume: user.resume
  });
});
});
    { new: true }
  );

  res.status(200).json({
    success: true,
    message: "Avatar uploaded successfully",
    avatar: user.avatar
  });
});

// Upload resume
export const uploadResume = catchAsyncError(async (req, res, next) => {
  if (!req.file) {
    return next(new ErrorHandler("Please upload a resume", 400));
  }

  const user = await User.findByIdAndUpdate(
    req.user.id,
    { 
      $set: { 
        resume: {
          public_id: req.file.filename,
          url: req.file.path
        }
      }
    },
    { new: true }
  );

  res.status(200).json({
    success: true,
    message: "Resume uploaded successfully",
    resume: user.resume
  });
    { new: true }
  );

  res.status(200).json({
    success: true,
    message: "Avatar uploaded successfully",
    avatar: user.avatar
  });
});

// Upload resume
export const uploadResume = catchAsyncError(async (req, res, next) => {
  if (!req.file) {
    return next(new ErrorHandler("Please upload a resume", 400));
  }

  const user = await User.findByIdAndUpdate(
    req.user.id,
    {
      $set: {
        resume: {
          public_id: req.file.filename,
          url: req.file.path
        }
      }
    },
    { new: true }
  );

  res.status(200).json({
    success: true,
    message: "Resume uploaded successfully",
    resume: user.resume
  });
});
